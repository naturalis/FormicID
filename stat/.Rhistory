df_good$width,
breaks = 50,
col = "red",
xlab = "Number of pixels",
main = "Pixel width distribution of the top 101 most imaged species"
)
# Plotting a normal distribution over the histogram
xfit <- seq(min(df_good$width), max(df_good$width), length = 40)
yfit <-
dnorm(xfit,
mean = mean(df_good$width),
sd = sd(df_good$width))
View(df_good)
View(df_channel_wrong)
View(top101)
# Ploting image distribution per shot type
g <- ggplot(top101)
g + geom_bar(aes(scientific_name, fill = shot_type), width = 0.5) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.6)) +
labs(title = "Histogram on species distrubition per shot_type",
subtitle = "Only species with over 300 images are shown") +
coord_flip()
# Reading all images paths in to a 'list'
images <-
list.files(path = data_dir,
pattern = ".jpg",
full.names = TRUE)
str(images)
x <- magick2cimg(images[1])
x <- load.image(x)
plot(x)
x <- magick2cimg(images[1])
plot(x)
x <- magick2cimg(images[1])
x <- image_read(images[1])
plot(x)
x <- load.image(x)
x <- magick2cimg(x)
dim(x)
x <- image_read(images[1])
dim(x)
plot(x)
plot(magick2cimg(x))
x <- image_read(images[1])
plot(magick2cimg(x))
x <- image_read(path = images[1])
plot(magick2cimg(x))
x
x <- image_convert(x, 'jpeg')
x
# Creates an empty list to be filled in the next function
lst2 <- c()
# Returns dimensions, depth, and channels for the images
for (image in images) {
x <- magick2cimg(image)
x <- load.image(x)
x <- dim(x)
x <- as.numeric(unlist(x))
lst2 <- c(lst2, x)
}
dim(x)
plot(x)
x
# Returns dimensions, depth, and channels for the images
for (image in images) {
x <- image_read(path = image)
x <- image_convert(x, 'jpeg')
x <- as.numeric(unlist(x))
lst2 <- c(lst2, x)
}
# Returns dimensions, depth, and channels for the images
for (image in images) {
x <- image_read(path = image)
x <- image_convert(x, 'jpeg')
x <- unlist(x)
lst2 <- c(lst2, x)
}
# Converting to a Dataframe and get rid of images without 3 channels (RGB)
df <-
data.frame(matrix(
unlist(lst2),
nrow = 10204,
byrow = TRUE,
ncol = 4
))
View(lst2)
View(df)
x <- image_read(path = images[1])
x <- image_convert(x, 'jpeg')
plot(x)
summary(x)
str(x)
print(x)
x <- magick2cimg(x)
x <- image_read(path = images[1])
x
x <- image_convert(x, 'jpeg', depth=8)
x
x <- magick2cimg(x)
x <- image_read(path = images[1])
x <- image_convert(x, 'jpeg', depth=16)
x
x <- magick2cimg(x)
# Returns dimensions, depth, and channels for the images
for (image in images) {
x <- magick2cimg(image)
x <- load.image(x)
x <- dim(x)
x <- as.numeric(unlist(x))
lst2 <- c(lst2, x)
}
# Creates an empty list to be filled in the next function
lst2 <- c()
# Returns dimensions, depth, and channels for the images
for (image in images) {
x <- magick2cimg(image)
x <- load.image(x)
x <- dim(x)
x <- as.numeric(unlist(x))
lst2 <- c(lst2, x)
}
# Reading all images paths in to a 'list'
images <-
list.files(path = data_dir,
pattern = ".jpg",
full.names = TRUE)
str(images)
x <- magick2cimg(images[1])
x <- load.image(x)
plot(x)
# Creates an empty list to be filled in the next function
lst2 <- c()
# Returns dimensions, depth, and channels for the images
for (image in images) {
x <- magick2cimg(image)
x <- load.image(x)
x <- dim(x)
x <- as.numeric(unlist(x))
lst2 <- c(lst2, x)
}
# Chunk 1: Setup
setwd(
"~/Google Drive/4. Biologie/Studie Biologie/Master Year 2/Internship CNN/8. FormicID/FormicID/stat/top101"
)
library(ggplot2) # for plotting
library(jpeg)
library(imager) # for reading jpg files
library(reshape2) # for using melt()
library(magick) # for image conversion because jpg files are read
top101 <- read.csv('top101.csv') # spreadsheat containing catalognumber, scientific name,
# shot_type and image url
# Chunk 2: small data set inspection
head(top101)
summary(top101)
# Chunk 3: Image distribution
# Ploting image distribution per shot type
g <- ggplot(top101)
g + geom_bar(aes(scientific_name, fill = shot_type), width = 0.5) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.6)) +
labs(title = "Histogram on species distrubition per shot_type",
subtitle = "Only species with over 300 images are shown") +
coord_flip()
# Chunk 4: File size
data_dir <-
"~/Google Drive/4. Biologie/Studie Biologie/Master Year 2/Internship CNN/8. FormicID/FormicID/data/2018-01-17_top101-images"
files_info <-
file.info(list.files(
path = data_dir,
pattern = ".jpg",
full.names = TRUE
))
head(files_info)
# Convert bytes to kilobytes
files_info$size2 <- files_info$size / 1000
# https://www.statmethods.net/graphs/density.html
# Histogram with normal curve plot
size_kb <- files_info$size2
cat('The mean size is ', mean(size_kb), 'kb')
summary(size_kb)
boxplot(size_kb)
h <- hist(
size_kb,
breaks = 50,
col = "red",
xlab = "File size (kb)",
main = "File size distribution of the top 101 most imaged species"
)
xfit <- seq(min(size_kb), max(size_kb), length = 40)
yfit <- dnorm(xfit, mean = mean(size_kb), sd = sd(size_kb))
yfit <- yfit * diff(h$mids[1:2]) * length(size_kb)
lines(xfit, yfit, col = "blue", lwd = 2)
# Kernel density plot
d <- density(files_info$size2)
plot(d, main = "File size distribution of the top 101 most imaged species")
polygon(d, col = "red", border = "blue")
# Reading all images paths in to a 'list'
images <-
list.files(path = data_dir,
pattern = ".jpg",
full.names = TRUE)
str(images)
x <- magick2cimg(images[1])
x <- load.image(x)
plot(x)
# Creates an empty list to be filled in the next function
lst2 <- c()
# Returns dimensions, depth, and channels for the images
for (image in images) {
x <- magick2cimg(image)
x <- load.image(x)
x <- dim(x)
x <- as.numeric(unlist(x))
lst2 <- c(lst2, x)
}
# Converting to a Dataframe and get rid of images without 3 channels (RGB)
df <-
data.frame(matrix(
unlist(lst2),
nrow = 10204,
byrow = TRUE,
ncol = 4
))
colnames(df) <- c('hight', 'width', 'depth', 'channel')
rownames(df) <- images
df_channel_wrong <- subset(df, channel <= 2)
df_good <- subset(df, channel > 2)
df_good_melt <- melt(df_good[1:2])
summary(df_good_melt)
# Boxplot of the hight and width distribution
g <- ggplot(df_good_melt)
g + geom_boxplot(aes(x = variable, y = value), alpha = 0.7) +
scale_y_continuous(name = "Number of Pixels",
breaks = seq(0, 225, 25),
limits = c(0, 225)) +
scale_x_discrete(name = "Dimensions") +
ggtitle("Boxplot of hight and width distribution")
# histogram of distribution of the width
h <- hist(
df_good$width,
breaks = 50,
col = "red",
xlab = "Number of pixels",
main = "Pixel width distribution of the top 101 most imaged species"
)
# Plotting a normal distribution over the histogram
xfit <- seq(min(df_good$width), max(df_good$width), length = 40)
yfit <-
dnorm(xfit,
mean = mean(df_good$width),
sd = sd(df_good$width))
yfit <- yfit * diff(h$mids[1:2]) * length(df_good$width)
lines(xfit, yfit, col = "blue", lwd = 2)
x <- image_read(image)
# Returns dimensions, depth, and channels for the images
for (image in images) {
x <- image_read(image)
x <- load.image(x)
x <- dim(x)
x <- as.numeric(unlist(x))
lst2 <- c(lst2, x)
}
# Returns dimensions, depth, and channels for the images
for (image in images) {
# x <- image_read(image)
x <- load.image(x)
x <- dim(x)
x <- as.numeric(unlist(x))
lst2 <- c(lst2, x)
}
# x <- image_read(image)
x <- load.image(image)
# Returns dimensions, depth, and channels for the images
for (image in images) {
# x <- image_read(image)
x <- load.image(image)
x <- dim(x)
x <- as.numeric(unlist(x))
lst2 <- c(lst2, x)
}
# Converting to a Dataframe and get rid of images without 3 channels (RGB)
df <-
data.frame(matrix(
unlist(lst2),
nrow = 10204,
byrow = TRUE,
ncol = 4
))
colnames(df) <- c('hight', 'width', 'depth', 'channel')
rownames(df) <- images
df_channel_wrong <- subset(df, channel <= 2)
df_good <- subset(df, channel > 2)
df_good_melt <- melt(df_good[1:2])
summary(df_good_melt)
# Boxplot of the hight and width distribution
g <- ggplot(df_good_melt)
g + geom_boxplot(aes(x = variable, y = value), alpha = 0.7) +
scale_y_continuous(name = "Number of Pixels",
breaks = seq(0, 225, 25),
limits = c(0, 225)) +
scale_x_discrete(name = "Dimensions") +
ggtitle("Boxplot of hight and width distribution")
# histogram of distribution of the width
h <- hist(
df_good$width,
breaks = 50,
col = "red",
xlab = "Number of pixels",
main = "Pixel width distribution of the top 101 most imaged species"
)
View(df_good)
# Plotting a normal distribution over the histogram
xfit <- seq(min(df_good$width), max(df_good$width), length = 40)
yfit <-
dnorm(xfit,
mean = mean(df_good$width),
sd = sd(df_good$width))
yfit <- yfit * diff(h$mids[1:2]) * length(df_good$width)
lines(xfit, yfit, col = "blue", lwd = 2)
x <- read_image(images[1])
x <- open_image(images[1])
x <- image_read(images[1])
x
str(x)
```{r Image dimensions error=TRUE}
head(files_info)
plot(topt101$shot_type)
plot(topt101$shot_type)
top101 <- read.csv('top101.csv') # spreadsheat containing catalognumber, scientific name,
plot(topt101$shot_type)
# Reading all images paths in to a 'list'
images <-
list.files(path = data_dir,
pattern = ".jpg",
full.names = TRUE)
str(images)
# head(top101)
summary(top101)
plot(topt101$shot_type)
top101 <- read.csv('top101.csv') # spreadsheat containing catalognumber, scientific name,
plot(top101$shot_type)
source('~/.active-rstudio-document', echo=TRUE)
p <- ggplot(top101, aes(shot_type))
p + geom_bar() +
xlab("Months") + ylab("Count") +
ggtitle("Chickens & Eggs")
p <- ggplot(top101)
p + geom_bar(aes(shot_type)) +
xlab("Months") + ylab("Count") +
ggtitle("Chickens & Eggs")
p <- ggplot(top101)
p + geom_bar(aes(shot_type), position = 'dodge') +
xlab("Months") + ylab("Count") +
ggtitle("Chickens & Eggs")
p + geom_bar(aes(shot_type), position = 'dodge') +
xlab("Shot types") + ylab("Number of images") +
ggtitle("Shot type distribution")
p + geom_bar(aes(shot_type), position = 'dodge') +
ylim(2500, 3500) +
xlab("Shot types") + ylab("Number of images") +
ggtitle("Shot type distribution")
p + geom_bar(aes(shot_type), position = 'dodge') +
ylim(0, 3500)
p + geom_bar(aes(shot_type), position = 'dodge') +
xlim(0, 3500)
p + geom_bar(aes(shot_type), position = 'dodge') +
xlim(2500, 3500)
p + geom_bar(aes(shot_type), position = 'dodge') +
ylim(2500, 3500)
p + geom_bar(aes(shot_type), position = 'dodge') +
ylim(2500, 3500, 100)
p <- ggplot(top101)
p + geom_bar(aes(shot_type), position = 'dodge') +
ylim(2500, 3500, 100)
p + geom_bar(aes(shot_type), position = 'dodge') +
ylim(2500, 3500, 1000)
coord_cartesian(ylim(2500, 3500)
p + geom_bar(aes(shot_type), position = 'dodge') +
coord_cartesian(ylim(2500, 3500))
p <- ggplot(top101)
p + geom_bar(aes(shot_type), position = 'dodge') +
coord_cartesian(ylim(2500, 3500)) +
xlab("Shot types") + ylab("Number of images") +
ggtitle("Shot type distribution")
p + geom_bar(aes(shot_type), position = 'dodge') +
ylim = c(2500, 3500) +
xlab("Shot types") + ylab("Number of images") +
ggtitle("Shot type distribution")
p + geom_bar(aes(shot_type), position = 'dodge') +
coord_cartesian(ylim = c(2500, 3500)) +
xlab("Shot types") + ylab("Number of images") +
ggtitle("Shot type distribution")
p + geom_bar(aes(shot_type), position = 'dodge') +
coord_cartesian(ylim = c(32500, 3500)) +
xlab("Shot types") + ylab("Number of images") +
ggtitle("Shot type distribution")
coord_cartesian(ylim = c(100, 3500) +
p + geom_bar(aes(shot_type), position = 'dodge') +
p + geom_bar(aes(shot_type), position = 'dodge') +
coord_cartesian(ylim = c(100, 3500)) +
xlab("Shot types") + ylab("Number of images") +
ggtitle("Shot type distribution")
p + geom_bar(aes(shot_type), position = 'dodge') +
coord_cartesian(ylim = c(3000)) +
xlab("Shot types") + ylab("Number of images") +
ggtitle("Shot type distribution")
p + geom_bar(aes(shot_type)) +
coord_cartesian(ylim = c(3000)) +
xlab("Shot types") + ylab("Number of images") +
ggtitle("Shot type distribution")
coord_cartesian(ylim = c(2500, 3500) +
p + geom_bar(aes(shot_type), position = 'dodge') +
coord_cartesian(ylim = c(2500, 3500)) +
xlab("Shot types") + ylab("Number of images") +
ggtitle("Shot type distribution")
p <- ggplot(top101)
p + geom_bar(aes(shot_type), position = 'dodge') +
coord_cartesian(ylim = c(2500, 3500)) +
xlab("Shot types") + ylab("Number of images") +
ggtitle("Shot type distribution")
p + geom_bar(aes(shot_type), position = 'dodge') +
coord_cartesian(ylim = c(3000, 3500)) +
xlab("Shot types") + ylab("Number of images") +
ggtitle("Shot type distribution")
p + geom_bar(aes(shot_type), position = 'dodge') +
coord_cartesian(ylim = c(3300, 3500)) +
xlab("Shot types") + ylab("Number of images") +
ggtitle("Shot type distribution")
p + geom_bar(aes(shot_type), position = 'dodge') +
coord_cartesian(ylim = c(3350, 3450)) +
xlab("Shot types") + ylab("Number of images") +
ggtitle("Shot type distribution")
---
title: "top101 visualization"
author: "MarijnJABoer"
date: "17/01/2018"
output:
md_docuemnt:
variant: markdown_github
toc: true
fig_width: 7
fig_height: 6
---
```{r Setup, echo=T, results='hide'}
setwd(
"~/Google Drive/4. Biologie/Studie Biologie/Master Year 2/Internship CNN/8. FormicID/FormicID/stat/top101"
)
library(ggplot2) # for plotting
library(jpeg)
library(imager) # for reading jpg files
library(reshape2) # for using melt()
library(magick) # for image conversion because jpg files are read
top101 <-
read.csv('top101.csv') # spreadsheat containing catalognumber, scientific name,
# shot_type and image url
```
# Dataset
```{r small data set inspection}
# head(top101)
summary(top101)
```
## Shot type plot
```{r Shot type plot, echo = FALSE}
p <- ggplot(top101)
p + geom_bar(aes(shot_type), position = 'dodge') +
coord_cartesian(ylim = c(3350, 3450)) +
xlab("Shot types") + ylab("Number of images") +
ggtitle("Shot type distribution")
```
# Image distribution per species
Here we can see how images are distributed per species. Within species there are 3 different shot types. p = profile, d = dorsal, and h = head view.
```{r Image distribution, fig.height = 10, echo = FALSE}
g <-
ggplot(top101) # Ploting image distribution per species per shot type
g + geom_bar(aes(scientific_name, fill = shot_type), width = 0.5) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.6)) +
labs(title = "Histogram on species distrubition per shot_type",
subtitle = "Only species with over 300 images are shown") +
coord_flip()
```
# File size distribution
File size is important because it is related to the pixel dimensions of images and therefore it will have an impact on training / validation speed.
```{r File size - reading data}
data_dir <- # Setting the directory that contains all the images
"~/Google Drive/4. Biologie/Studie Biologie/Master Year 2/Internship CNN/8. FormicID/FormicID/data/2018-01-17_top101-images"
files_info <- # Reading all the images in the directory
file.info(list.files(
path = data_dir,
pattern = ".jpg",
full.names = TRUE
))
# head(files_info)
files_info$size2 <-
files_info$size / 1000 # Convert bytes to kilobytes
size_kb <-
files_info$size2 # creating a variable containing only the file size in Kb
cat('The mean size is ', mean(size_kb), 'kb') # What is the mean size?
# summary(size_kb)
# boxplot(size_kb)
```
## Plotting file size
File sizes is viewed in Kb's.
```{r File size - plotting, echo=FALSE}
# Link to a small explanation on plotting histograms and density curves.
# https://www.statmethods.net/graphs/density.html
# Histogram
h <- hist(
size_kb,
breaks = 50,
col = "red",
xlab = "File size (kb)",
main = "File size distribution of the top 101 most imaged species"
)
